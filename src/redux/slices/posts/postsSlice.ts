// Slice for posts

import { createSlice, type PayloadAction } from "@reduxjs/toolkit";
import {
  addPostAsync,
  editPostAsync,
  deletePostAsync,
  getPostsAsync,
} from "./thunks";

const initialState: PostsSliceState = {
  value: [],
  status: "idle",
};

// We need to fetch posts from the API, so we need to create an async thunk.
// We can use the createAsyncThunk function from Redux Toolkit to do this.
// The first argument is the name of the thunk, and the second argument is a
// function that returns a promise containing the data we want to fetch.

export const postsSlice = createSlice({
  name: "posts",
  initialState,
  reducers: {
    addPost: (state, action) => {
      state.value.push(action.payload);
    },
    removePost: (state, action: PayloadAction<string>) => {
      state.value = state.value.filter(
        (post) => post._id !== action.payload
      );
    },
    updatePost: (state, action: PayloadAction<IPost>) => {
      const { _id: postId, title, content } = action.payload;
      const existingPost = state.value.find((post) => post._id === postId);
      if (existingPost) {
        existingPost.title = title;
        existingPost.content = content;
      }
    },
    setPosts: (state, action) => {
      state.value = action.payload;
    },
    setStatus: (
      state,
      action: PayloadAction<"idle" | "loading" | "failed">
    ) => {
      state.status = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addPostAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(addPostAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value.push(action.payload);
      })
      .addCase(addPostAsync.rejected, (state, action) => {
        state.status = "failed";
      })
      .addCase(deletePostAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deletePostAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = state.value.filter(
          (post) => post._id !== action.payload
        );
      })
      .addCase(deletePostAsync.rejected, (state, action) => {
        state.status = "failed";
      })
      .addCase(editPostAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(editPostAsync.fulfilled, (state, action) => {
        state.status = "idle";
        const { postId, title, content } = action.payload;
        const existingPost = state.value.find((post) => post._id === postId);
        if (existingPost) {
          existingPost.title = title;
          existingPost.content = content;
        }
      })
      .addCase(editPostAsync.rejected, (state, action) => {
        state.status = "failed";
      })
      .addCase(getPostsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getPostsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
      })
      .addCase(getPostsAsync.rejected, (state, action) => {
        state.status = "failed";
      });
  },
});

export interface PostsSliceState {
  value: IPost[];
  status: "idle" | "loading" | "failed";
}
